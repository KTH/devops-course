========== Why do we test? ==========
Why:
Our software meets the requirements outlined in specification
Responds correctly to different input
Performs functions within accepted time
Is usuable 
Can be installed and run in intended environments
Achieves results that stakeholders desire

How:
Unit testing
Regression testing
Integration testing
System testing
Manual testing

One type of testing may not be sufficient. Ideally good coverage of different types of testing may be needed to find flaws in our software.

========== Testing the web is hard ==========
One bad solution to start testing, and certainly something we as developers are quilty of doing is manual testing.

How:
Trying in these different environments
Entering inputs
Taking screenshots and archiving findings

So what’s the problem with manual testing?
It’s boring
It takes time
It’s tedious 
Humans make mistakes

To ensure code quality, we need testing – and manual testing is a bad choice. 

========== To ensure good code quality code... ==========
For discussion:
Should we test in every browser? Is it OK to leave Internet Explorer behind?
Does every device matter? 
Does every user matter? Becomes a matter of diversity and inclusion. 

========== We need automation ==========
We as developers are lazy – we can do other things rather than testing
Prevent bad code from reaching customers by prohibiting CD for bad builds
Run more often, at every commit
Regression testing: test major functions of our solution – to be run every time (for any bug fix, feature)

So for the web, with all its challenges – how do we proceeded to do integration testing?

========== Selenium ==========
A free open source suite of tools to automate web browsers. IDE, WebDriver/Frameworks, Grid, etc.
Platforms: Windows, Mac, Linux, iOS, Android, etc.
Programming languages: Java, Python, C#, PHP, Ruby, Perl, JavaScript
Browsers: IE, Firefox, Chrome, Safari

Primarily used for automating testing of web solutions (forms, clicking buttons, etc.), but you can build fun things with it as well! 
-SSSB story.

========== kth.se test ==========
Explain what we are going to test. 
Getting from https://kth.se to above screen and testing the “Anmäl dig här” button.

Command is what is going to happen.
Target is the target element or desired state. 
Value is used for inputs and key presses.
Hit play!
See logs.

If something happens on the page. Have changed the value in this case.

How do we take it from the IDE to code? Using the WebDriver!

========== But is it really automated yet? ==========
The functional test is done. But how do we run it? Now we need to incorporate the test and make sure they run aspart of our CI/CD pipeline. And what about running this on multiple browsers? It will work if you setup your machine with all the browser, but do you really want that? And how would you get Internet Explorer on your Mac?

========== Sauce Labs ==========
Ability to run your Selenium tests on all these different operating systems, browsers and devices – without having access to them in your own environment. You’ll get detailed dashboards with reports when things go wrong, and screenshots of how things looked when they failed.


